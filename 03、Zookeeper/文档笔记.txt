zookeeper: 
1) 基本介绍:
	Zookeeper 是一个分布式协调服务的开源框架。 
		主要用来解决分布式集群中应用系统的一致性问题
		
	zookeeper就是一个集群的管理工具,也可以看做是一个小文件(1m)的存储系统 
		主要可以提供:  统一命名服务,分布式配置管理,分布式消息队列,节点的选举
		
	

2) 架构方案:
	leader: 对于 create， setData， delete 等有写操作的请求，则需要统一转发给leader 处理
	Follower :处理客户端非事务（读操作） 请求
	observer: 提高查询的并发能力(一般不需要)
	

分布式和集群一般来说都是同时存在共同的作用于整个项目

集群:  将相同的东东, 重复的部署了多次, 各个节点应该都是一样的
分布式:  将一个系统, 或者一个业务, 拆分成不同的子系统, 或者子业务, 然后进行分开部署

通俗的话语:  
	假设有一个小饭店, 最早只有一个厨师(备料, 洗菜, 切菜,炒菜 )
		后来呢, 吃饭的人是越来越多了, 一个厨师忙不过来了, 请一个厨师来, 两个厨师的关系 集群
		后来呢, 为了让厨师能够专心的炒菜, 然后请了一个配菜师傅(备料, 洗菜, 切菜), 配菜师傅和厨师(分布式)
		后来呢, 又请了一个配菜师傅, 两个配菜师傅干的活是一样的(集群)
	
3) zookeeper的特点:
		3.1) 全局数据一致性: 在zookeeper集群中各个节点中数据应该都是一样的
		3.2) 可靠性 :  如果一台服务器接收到数据后, 那么其他的节点也应该将数据全部接收到
		3.3) 顺序性 :  
			全局有序 :当一个客户端向zookeeper添加了数据后, 其他客户端在获取数据的时候, 按照添加的顺序来获取
			偏序 :  当一个客户端向zookeeper添加了数据后, 只有这个客户端在获取数据的时候是有序的
		3.4) 数据更新的原子性: 在执行一个操作的时候,要么全部成功,要么全部失败, 不存在中间状态
		3.5) 实时性:  实时监听某一个节点的状态的改变

4)zookeeper的集群搭建: 三台服务器
	4.1) 下载安装包: CDH版本  http://archive.cloudera.com/cdh5/cdh/5/
	4.2) 解压的安装包 :  
			软件安装的目录结构:
				安装包的目录: /export/softwares 
				安装的目录:  /export/servers/
				
	4.3) 修改配置信息
	4.4) 分发给其他的机子
	4.5) 启动各个节点服务器

	搭建完成后, 将三台服务器依次启动后, 必须能够看到一个leader 两个follower, 否则认为搭建失败
	
5) zookeeper的可视化的客户端
		在使用可视化的客户端的时候, 推荐写ip地址, 不要使用linux的主机名或者别名, 有可能会连接不上的
			如果非要使用linux的主机名或者别名, 需要在windows的hosts文件中添加映射关系
				windows的hosts的文件目录位置: C:\Windows\System32\drivers\etc
			
			如果无法修改hosts文件, 将其拉出桌面, 修改后, 在拖回去, 就可以了
			如果打开目录后, 发现没有hosts文件, 从同桌拷贝一份过来
			
			在hosts文件中放置一份和linux的hosts文件一样的内容(后三行内容)
				
				192.168.72.141 node01.hadoop.com  node01 
				192.168.72.142 node02.hadoop.com  node02
				192.168.72.143 node03.hadoop.com  node03
			
			如何验证是否可以使用呢?  
				打开windows的CMD窗口, 输入  ping  主机名  测试
			
6)  zookeeper的shell命令的操作:
	6.1) 如何来使用客户端登录zookeeper服务器:  zkCli.sh
	
	
	6.2) 常用命令 :  
		1) 创建节点的命令:  create [-s] [-e] path data
				属性: 
					-s :是一个顺序节点
					-e :  是一个临时节点
					
 
			组建出四种节点类型:   记忆
				永久的节点  :  一旦创建以后, 只能通过手动删除的方式将其删除
				永久的顺序节点  :  一旦创建以后, 只能通过手动删除的方式将其删除, 在文件名的后面添加顺序值
				临时的节点   : 一旦创建以后, 只能在当前会话有效, 一旦会话关闭, 临时节点也会丢失的
				临时的顺序节点:  一旦创建以后, 只能在当前会话有效, 一旦会话关闭, 临时节点也会丢失的, 在文件的后面添加顺序值
				
			临时和永久的区别:
				1) 永久节点会一直存在,直到手动删除, 临时节点只在当前会话有效
				2) 永久节点可以创建子节点, 而临时节点无法创建子节点		
					
		2) 查看列表的命令:  ls  path
		
		3) 查看内容的命令: get path
		4) 修改节点数据 :  set path  data
				这是覆盖操作
		5) 删除节点操作:  
			delete  path:  用来删除没有子节点的节点
			rmr  path : 用来删除没有子节点的节点和有子节点的节点
		
		
		
		6) 限制某一个节点的数据的长度, 以及节点下可以有多少个子节点:
			限制数据的长度:  setquota -b   val  path
			限制数据的子节点格式:  setquota -n  val  path

			查看某一个节点的限制条件: listquota  path

	
			注意: 当设置了限制长度或者个数的条件后, 发现设置是无效的, 限制条件只会在日志文件中打印一个警告信息, 并不会直接报错
			

7) zookeeper的数据模型 :  
	zookeeper的数据的存储和window的数据存储方案是类似的 , 也是树状的结构来存储
	
	但是和Windows也有一些不同的地方: znode   知道
		1) 在window中,文件就是文件, 目录就是目录, 在zookeeper中, 某一个节点即是一个文件, 也是一个目录
		2) zookeeper的节点, 在进行读取数据的时候, 一次性全读, 写数据的时候, 直接将原有完全覆盖掉, 
				不会出现读取一部分或者写入一部分
		3) znode中,文件存储数据的大小是有限制:默认只能存储 1MB
			如果要修改默认的文件最大存储数据量:  ZOO_USER_CFG="-Djute.maxbuffer=10240000"
					一般不需要修改, 因为实际开发中, 在zookeeper中存储数据大小会远远小于1MB
		4) znode通过路径的方式来访问的, 在书写路径的时候, 必须携带 /  通过绝对路径来访问


8) zookeeper的watch机制:   JMS(java message server) 
 
	如何实现zookeeper的watch机制 : 
		1) 客户端需要先进行绑定watch事件: 对某一个节点感兴趣
		2) 	服务端进行事件的触发
		3) 当这个节点触发了一些改变后, 自动的通知绑定节点的客户端告知发生了什么样事件情况
		
	watch的特点:
		1) 一次性绑定: 只会被触发一次
		2) 将各种状态的时间 封装成了时间的对象event
		3) 通过和绑定的过程都是异步执行的, 不会影响主线程
		4) 先注册, 在触发

	
使用watch机制, 一般都是在java代码中操作使用的 :  监听每一台服务器中tomcat的是否已经关闭

	使用watch机制 +  临时节点操作:实现监听集群的上线和下线的过程



zookeeper的JavaAPI的操作 :     CURD	+ watch  (作业)




总结:
1) 大数据基本的导论(理解)
	概念, 特点, 作用. 发展前景

2) 大数据的预备知识: 
	服务器概念, 机架的概念, IDC数据中心(数据托管服务, 提高用户访问效率)
	raid: 扩发磁盘的存储能力, 将多个磁盘组合在一起
		raid0  raid1    
		开发中:  raid01 raid00
3) 大数据的环境统一:  
4)  zookeeper的基本介绍:
		是一个集群的管理工具, 小型的文件存储系统
		
	zookeeper的架构:  leader follower  observer
	zookeeper的特点:
	zookeeper集群搭建(搞定)
	数据节点类型: 四种
	windows的文件和zookeeper的文件的区别
	zookeeper的shell命令操作(操作一遍)
	zookeeper的watch机制: 会使用
	zookeeper的JavaAPI的操作(操作一遍)

作业:
	zookeeper集群搭建(搞定)
	zookeeper的shell命令操作
	zookeeper的JavaAPI操作